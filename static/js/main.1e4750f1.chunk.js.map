{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackCounter/FeedbackCounter.jsx","App.jsx","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackCounter","useState","setGood","setNeutral","setBad","countTotalFeedback","type","onClick","prevState","Math","round","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAAe,SAASA,EAAT,GAAsE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC3D,OACI,+BACQ,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,0CAAaC,KACb,qDAAwBC,EAAqB,EAAIA,EAAqB,EAAtE,UCJD,SAASC,IAEpB,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KAcMC,EAAqB,WACvB,OAAOV,EAAOC,EAAUC,GAU5B,OACI,qCACI,uDACA,gCACI,wBAAQS,KAAK,SAASC,QA3BN,WACxBL,GAAQ,SAAAM,GAAS,OAAIA,EAAY,MA0BzB,kBACA,wBAAQF,KAAK,SAASC,QAxBH,WAC3BJ,GAAW,SAAAK,GAAS,OAAIA,EAAY,MAuB5B,qBACA,wBAAQF,KAAK,SAASC,QArBP,WACvBH,GAAO,SAAAI,GAAS,OAAIA,EAAY,MAoBxB,oBAEJ,4CAE0B,IAAzBH,IACK,mDACA,cAACX,EAAD,CACFC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EAAKC,MAAOO,IACjBN,mBAtBDU,KAAKC,MAAa,IAAPf,EAAaU,UCjBxBM,MANf,WACE,OACE,cAACX,EAAD,KCCJY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.1e4750f1.chunk.js","sourcesContent":["export default function Statistics({good, neutral, bad, total, positivePercentage}) {\n    return (\n        <ul>\n                <li>Good: {good}</li>\n                <li>Neutral: {neutral}</li>\n                <li>Bad: {bad}</li>\n                <li>Total : {total}</li>\n                <li>Positive feedback: {positivePercentage > 0 ? positivePercentage : 0}%</li>\n            </ul>\n    )\n}","import { useState } from 'react';\nimport Statistics from '../Statistics/Statistics';\n\nexport default function FeedbackCounter() {\n\n    const [good, setGood] = useState(0);\n    const [neutral, setNeutral] = useState(0);\n    const [bad, setBad] = useState(0);\n\n    const handleGoodIncrement = () => {\n        setGood(prevState => prevState + 1);\n    }\n\n    const handleNeutralIncrement = () => {\n        setNeutral(prevState => prevState + 1);\n    }\n\n    const handleBadIncrement = () => {\n        setBad(prevState => prevState + 1);\n    }\n\n    const countTotalFeedback = () => {\n        return good + neutral + bad;\n    }\n\n    const countPositiveFeedbackPercentage = () => {\n        return Math.round(good * 100 / countTotalFeedback());\n    }\n\n    \n\n\n    return (\n        <>\n            <h1>Please leave feedback</h1>\n            <div>\n                <button type=\"button\" onClick={handleGoodIncrement}>good</button>\n                <button type=\"button\" onClick={handleNeutralIncrement}>neutral</button>\n                <button type=\"button\" onClick={handleBadIncrement}>bad</button>\n            </div>\n            <h2>Statistics</h2>\n\n            {countTotalFeedback() === 0\n                ? <h2>No feedback given</h2>\n                : <Statistics\n                good={good}\n                neutral={neutral}\n                bad={bad} total={countTotalFeedback()}\n                positivePercentage={countPositiveFeedbackPercentage()} />}  \n        </>\n    )\n}","import FeedbackCounter from \"./components/FeedbackCounter/FeedbackCounter\";\n\n\nfunction App() {\n  return (\n    <FeedbackCounter/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}